{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, GET_DESIRE_LIST, GET_DESIRE, DELETE_DESIRE } from \"./types\"; //Fix bug with priority in Spring Boot Server, needs to check null first\n\nexport const addDesire = (desireList_id, desire, history) => async dispatch => {\n  try {\n    await axios.post(\"/api/desireList/\".concat(desireList_id), desire);\n    history.push(\"/mapBoard/\".concat(desireList_id));\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    if (err.response) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    }\n  }\n};\nexport const getDesireList = desireList_id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/desireList/\".concat(desireList_id));\n    dispatch({\n      type: GET_DESIRE_LIST,\n      payload: res.data\n    });\n  } catch (err) {\n    if (err.response) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    }\n  }\n};\nexport const getDesire = (desireList_id, pt_id, history) => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/desireList/\".concat(desireList_id, \"/\").concat(pt_id));\n    dispatch({\n      type: GET_DESIRE,\n      payload: res.data\n    });\n  } catch (err) {\n    history.push(\"/dashboard\");\n  }\n};\nexport const updateDesire = (desireList_id, pt_id, desire, history) => async dispatch => {\n  try {\n    await axios.patch(\"/api/desireList/\".concat(desireList_id, \"/\").concat(pt_id), desire);\n    history.push(\"/mapBoard/\".concat(desireList_id));\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const deleteDesire = (desireList_id, pt_id) => async dispatch => {\n  if (window.confirm(\"You are deleting map task \".concat(pt_id, \", this action cannot be undone\"))) {\n    await axios.delete(\"/api/desireList/\".concat(desireList_id, \"/\").concat(pt_id));\n    dispatch({\n      type: DELETE_DESIRE,\n      payload: pt_id\n    });\n  }\n};","map":{"version":3,"sources":["/Users/yazenkova/Desktop/AgileIntPPMTool-master/ppmtool-react-client/src/actions/desireListActions.js"],"names":["axios","GET_ERRORS","GET_DESIRE_LIST","GET_DESIRE","DELETE_DESIRE","addDesire","desireList_id","desire","history","dispatch","post","push","type","payload","err","response","data","getDesireList","res","get","getDesire","pt_id","updateDesire","patch","deleteDesire","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  GET_ERRORS,\n  GET_DESIRE_LIST,\n  GET_DESIRE,\n  DELETE_DESIRE,\n} from \"./types\";\n\n//Fix bug with priority in Spring Boot Server, needs to check null first\nexport const addDesire = (desireList_id, desire, history) => async (\n  dispatch\n) => {\n  try {\n    await axios.post(`/api/desireList/${desireList_id}`, desire);\n    history.push(`/mapBoard/${desireList_id}`);\n    dispatch({\n      type: GET_ERRORS,\n      payload: {},\n    });\n  } catch (err) {\n    if (err.response) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      });\n    }\n  }\n};\n\nexport const getDesireList = (desireList_id) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/desireList/${desireList_id}`);\n    dispatch({\n      type: GET_DESIRE_LIST,\n      payload: res.data,\n    });\n  } catch (err) {\n    if (err.response) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      });\n    }\n  }\n};\n\nexport const getDesire = (desireList_id, pt_id, history) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.get(`/api/desireList/${desireList_id}/${pt_id}`);\n    dispatch({\n      type: GET_DESIRE,\n      payload: res.data,\n    });\n  } catch (err) {\n    history.push(\"/dashboard\");\n  }\n};\n\nexport const updateDesire = (desireList_id, pt_id, desire, history) => async (\n  dispatch\n) => {\n  try {\n    await axios.patch(`/api/desireList/${desireList_id}/${pt_id}`, desire);\n    history.push(`/mapBoard/${desireList_id}`);\n    dispatch({\n      type: GET_ERRORS,\n      payload: {},\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data,\n    });\n  }\n};\n\nexport const deleteDesire = (desireList_id, pt_id) => async (dispatch) => {\n  if (\n    window.confirm(\n      `You are deleting map task ${pt_id}, this action cannot be undone`\n    )\n  ) {\n    await axios.delete(`/api/desireList/${desireList_id}/${pt_id}`);\n    dispatch({\n      type: DELETE_DESIRE,\n      payload: pt_id,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}